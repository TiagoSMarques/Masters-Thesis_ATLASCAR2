#! /usr/bin/env python
# LDMRS configuration

PACKAGE='sick_ldmrs'

from math import pi

from driver_base.msg import SensorLevels
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
#       Name                     Type        Reconfiguration level             Description                                                                         Default    Min      Max
gen.add("start_angle",           int_t,   SensorLevels.RECONFIGURE_STOP,    "The angle of the first range measurement.",                                        50,      -59,  50)
gen.add("end_angle",             int_t,   SensorLevels.RECONFIGURE_STOP,    "The angle of the last range measurement.",                                         -50,     -60,   49)
gen.add("scan_frequency",        int_t,   SensorLevels.RECONFIGURE_STOP,    "Scan frequency, 0 = 12.5Hz, 1 = 25 Hz, 2 = 50 Hz",                             2,         0,   2)
gen.add("sync_angle_offset",     int_t,   SensorLevels.RECONFIGURE_STOP,    "Sychronization offset angle in degrees",                                           0,         -180,    179)
gen.add("constant_angular_res",  bool_t,      SensorLevels.RECONFIGURE_STOP,    "Constant or focussed angular resolution type (focussed valid for 12.5Hz scan freq only)",      True)
gen.add("frame_id_prefix",       str_t,      SensorLevels.RECONFIGURE_CLOSE,   "Frame id of the sensor. Scan messages append scan number (0-3) to this",           "/ldmrs")
gen.add("use_first_echo",        bool_t,     SensorLevels.RECONFIGURE_CLOSE,   "Scan messages will use first echo if true, last echo otherwise",                    False)
gen.add("time_smoothing_factor",   double_t,     SensorLevels.RECONFIGURE_CLOSE,   "high values will smooth time more, low values will track noisy time more",      0.97,      0.0,    1.0)
gen.add("time_error_threshold",  int_t,     SensorLevels.RECONFIGURE_CLOSE,   "allowed error (miliseconds) between smooth time and noisy time before step correction is applied, -1 disables time correction",  10,  -1,  500)
gen.add("apply_changes",         bool_t,     SensorLevels.RECONFIGURE_CLOSE,   "Issues a restart with the new parameter value. Note: none of the changes will take effect until this is set",  False)

# generate .py and .h files for the configuration in the cfg directory
exit(gen.generate(PACKAGE, "sickldmrs", "ldmrs"))
