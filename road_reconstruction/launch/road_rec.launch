<?xml version="1.0"?>
<launch>
    <!-- Usar isto quando se usam bags ou usar "rosparam set use_sim_time true"-->
    <!-- <param name="use_sim_time" value="true"/> -->
    <!-- Resto das defenições -->
    <arg name = "record" default = "false"/>
    <param name = "includeUnav" value="true" type="bool"/>
    <param name = "IncludeScans" value="111111" type="string"/>
    <param name = "ref_sensor" value="lms151_E" type="string"/>
    <!--Launch the visualization-->
    <node pkg="rviz" type="rviz" name="rviz" args="--display-config $(find free_space_detection)/config/rviz.rviz" required="true"/>
    
    
    <node name="novatel_position"
        pkg="nodelet" type="nodelet"
        args="standalone novatel_gps_driver/novatel_gps_nodelet">
    <rosparam>
      connection_type: serial
      device: /dev/ttyUSB0
      publish_novatel_positions: true
      publish_novatelgnss_positions: true
      publish_imu_messages: false
      publish_nmea_messages: true
      publish_default_messages: true
      publish_diagnostics: true
      frame_id: /gps
    </rosparam>
    </node>
  <!-- Node novatel para comandos da unidade inercial -->
    <node name="novatel_imu"
        pkg="nodelet" type="nodelet"
        args="standalone novatel_gps_driver/novatel_gps_nodelet">
    <rosparam>
      connection_type: serial
      device: /dev/ttyUSB1
      publish_novatel_positions: false
      publish_novatelgnss_positions: false
      publish_imu_messages: true
      publish_nmea_messages: false
      publish_default_messages: false
      publish_diagnostics: true
      frame_id: /gps
  </rosparam>
  </node>
      
    <!-- Launch the node for the arduino comunication   -->
    <node pkg="rosserial_python" type="serial_node.py" name="serial_node">
        <param name="port" value="/dev/ttyACM1"/>
        <param name="baud" value="19200"/>
    </node>
    <!-- Launch the node   -->
    <node pkg="free_space_detection" type="device_frame_publisher_node" name="device_frame_publisher" required="true" output="screen"/>
    <!-- Launch the node   -->
    <node pkg="orientation_module" type="frame_tf_broadcaster" name="frame_tf_broadcaster" required="true" output="screen"/>
    <!-- Launch the node   -->
    <node pkg="orientation_module" type="orientation_module_node" name="comunic" required="true" output="screen"/>
    <!-- Point cloud assembler -->
    <node pkg="road_reconstruction" type="assem" name="assem" required="true" output="screen"/>
    <!-- Launch the node   -->
    <node pkg="road_reconstruction" type="road_reconstruction_node" name="road_reconstruction" required="true" output="screen"/>
    <!-- Conversão em dados de gps -->
    <node name="gps_conv" pkg="gps_common" type="utm_odometry_node">
        <remap from="odom" to="vo"/>
        <param name="rot_covariance" value="99999" />
        <param name="frame_id" value="ground" />
    </node>
    <!-- Odometria -->
    <!-- <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf"><param name="output_frame" value="odom"/><param name="freq" value="30.0"/><param name="sensor_timeout" value="1.0"/><param name="odom_used" value="false"/><param name="imu_used" value="true"/><param name="vo_used" value="true"/><param name="debug" value="false"/><param name="self_diagnose" value="false"/></node><group><remap from="gps" to="aaa"/></group> -->
    <!-- Launch the node   -->
    <!-- <node pkg="free_space_detection" type="free_space_detection_node" name="free_space_detection" required="true" output="screen"/> -->
    <!--Launch the robot model-->
    <include file="$(find free_space_detection)/launch/robotmodel.launch" output="log"/>
</launch>
